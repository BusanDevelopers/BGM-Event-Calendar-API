# This is a basic workflow to help you get started with Actions

name: GitHub Action Test

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
        node_version:
          - 14
          - 16
        architecture:
          - x64

    # Service containers to run with test
    services:
      # Label used to access the service container
      cosmosdb:
        # Docker Hub Image (Using Redis 5.0.x)
        image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator
        ports:
          # Maps port 8081, 10251, 10252, 10253, 10254 on service container to the host
          - 8081:8081
          - 10251:10251
          - 10252:10252
          - 10253:10253
          - 10254:10254
        options: >-
          -m 3g
          --cpus 2.0

    name: Node ${{ matrix.node_version }} - ${{ matrix.architecture }} on ${{ matrix.os }}

    env:
      DB_HOST: 127.0.0.1
      DB_PORT: 8081

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Wait for 1 min before setting up the container
      - name: Sleep for 2 min
        uses: jakejarvis/wait-action@master
        with:
          time: '120s'

      # Checks whether the container properly runs or not
      - name: Check CosmosDB Emulator
        run: |
          wget -O- https://${{ env.DB_HOST }}:${{ env.DB_PORT }}/_explorer/index.html --no-check-certificate

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out repository code
        uses: actions/checkout@v2

      # Install Node.JS
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node_version }}
          architecture: ${{ matrix.architecture }}

      # Install Dependencies
      - name: Install Dependencies
        run: npm install

      # Create ServerConfig.ts
      - run: |
          cp src/ServerConfigExample.ts src/ServerConfig.ts

      # Run Test
      - name: Run Test
        run: DB_HOST=${{ env.DB_HOST }} DB_PORT=${{ env.DB_PORT }} npm test
